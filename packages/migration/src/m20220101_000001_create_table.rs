use carbonable_domain::infrastructure::postgres::entity::{
    AirdropIden, BadgeIden, BuyIden, ErcImplementation, ImplementationIden, MinterIden,
    OffseterIden, PaymentIden, ProjectIden, ProvisionIden, SnapshotIden, TransferIden,
    TransferSingleIden, UriIden, YielderIden,
};
use sea_orm_migration::prelude::*;
use sea_query::extension::postgres::Type;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // Replace the sample below with your own migration scripts
        manager
            .create_table(
                Table::create()
                    .table(ImplementationIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ImplementationIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ImplementationIden::Address)
                            .string()
                            .string_len(66)
                            .unique_key()
                            .not_null(),
                    )
                    .col(ColumnDef::new(ImplementationIden::Abi).json().not_null())
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(UriIden::Table)
                    .if_not_exists()
                    .col(ColumnDef::new(UriIden::Id).uuid().not_null().primary_key())
                    .col(ColumnDef::new(UriIden::Uri).string().not_null())
                    .col(ColumnDef::new(UriIden::Address).string().not_null())
                    .col(ColumnDef::new(UriIden::Data).json().not_null())
                    .to_owned(),
            )
            .await?;
        manager
            .create_type(
                Type::create()
                    .as_enum(ErcImplementation::Enum)
                    .values([ErcImplementation::Erc721, ErcImplementation::Erc3525])
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(ProjectIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ProjectIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(ProjectIden::Address)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(ColumnDef::new(ProjectIden::Slug).string().not_null())
                    .col(ColumnDef::new(ProjectIden::Name).string().not_null())
                    .col(ColumnDef::new(ProjectIden::Slot).binary().not_null())
                    .col(
                        ColumnDef::new(ProjectIden::Symbol)
                            .string()
                            .string_len(20)
                            .null(),
                    )
                    .col(ColumnDef::new(ProjectIden::TotalSupply).binary())
                    .col(
                        ColumnDef::new(ProjectIden::Owner)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(ColumnDef::new(ProjectIden::TonEquivalent).binary())
                    .col(ColumnDef::new(ProjectIden::Times).array(ColumnType::DateTime))
                    .col(
                        ColumnDef::new(ProjectIden::Absorptions)
                            .array(ColumnType::Binary(BlobSize::Medium)),
                    )
                    .col(ColumnDef::new(ProjectIden::Setup).boolean().default(false))
                    .col(
                        ColumnDef::new(ProjectIden::ValueDecimals)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(ProjectIden::ErcImplementation)
                            .enumeration(
                                ErcImplementation::Enum,
                                [ErcImplementation::Erc721, ErcImplementation::Erc3525],
                            )
                            .not_null(),
                    )
                    .col(ColumnDef::new(ProjectIden::ImplementationId).uuid().null())
                    .col(ColumnDef::new(ProjectIden::UriId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("project_implementation_id_fkey")
                            .from(ProjectIden::Table, ProjectIden::ImplementationId)
                            .to(ImplementationIden::Table, ImplementationIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("project_address_slug_slot_idx")
                            .table(ProjectIden::Table)
                            .col(ProjectIden::Address)
                            .col(ProjectIden::Slug)
                            .col(ProjectIden::Slot)
                            .col(ProjectIden::ErcImplementation)
                            .unique(),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(PaymentIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(PaymentIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(PaymentIden::Address)
                            .string()
                            .string_len(66)
                            .not_null()
                            .unique_key(),
                    )
                    .col(ColumnDef::new(PaymentIden::Name).string().not_null())
                    .col(
                        ColumnDef::new(PaymentIden::Symbol)
                            .string()
                            .string_len(20)
                            .not_null(),
                    )
                    .col(ColumnDef::new(PaymentIden::Decimals).binary().not_null())
                    .col(ColumnDef::new(PaymentIden::ImplementationId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("payment_implementation_id_fkey")
                            .from(PaymentIden::Table, PaymentIden::ImplementationId)
                            .to(ImplementationIden::Table, ImplementationIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(MinterIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(MinterIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(MinterIden::Address)
                            .string()
                            .string_len(66)
                            .not_null()
                            .unique_key(),
                    )
                    .col(ColumnDef::new(MinterIden::MaxSupply).binary().null())
                    .col(
                        ColumnDef::new(MinterIden::ReservedSupply)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(MinterIden::PreSaleOpen)
                            .boolean()
                            .default(false)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(MinterIden::PublicSaleOpen)
                            .boolean()
                            .default(false)
                            .not_null(),
                    )
                    .col(ColumnDef::new(MinterIden::MaxBuyPerTx).binary().null())
                    .col(ColumnDef::new(MinterIden::MaxValuePerTx).binary().null())
                    .col(ColumnDef::new(MinterIden::MinValuePerTx).binary().null())
                    .col(ColumnDef::new(MinterIden::UnitPrice).binary().not_null())
                    .col(
                        ColumnDef::new(MinterIden::WhitelistMerkleRoot)
                            .binary()
                            .null(),
                    )
                    .col(
                        ColumnDef::new(MinterIden::SoldOut)
                            .boolean()
                            .default(false)
                            .not_null(),
                    )
                    .col(ColumnDef::new(MinterIden::TotalValue).binary().null())
                    .col(
                        ColumnDef::new(MinterIden::ErcImplementation)
                            .enumeration(
                                ErcImplementation::Enum,
                                [ErcImplementation::Erc721, ErcImplementation::Erc3525],
                            )
                            .not_null(),
                    )
                    .col(ColumnDef::new(MinterIden::Whitelist).json().null())
                    .col(ColumnDef::new(MinterIden::ProjectId).uuid().null())
                    .col(ColumnDef::new(MinterIden::PaymentId).uuid().null())
                    .col(ColumnDef::new(MinterIden::ImplementationId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("minter_project_id_fkey")
                            .from(MinterIden::Table, MinterIden::ProjectId)
                            .to(ProjectIden::Table, ProjectIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("minter_payment_id_fkey")
                            .from(MinterIden::Table, MinterIden::PaymentId)
                            .to(PaymentIden::Table, PaymentIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("minter_implementation_id_fkey")
                            .from(MinterIden::Table, MinterIden::ImplementationId)
                            .to(ImplementationIden::Table, ImplementationIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(BadgeIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(BadgeIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(BadgeIden::Address)
                            .string()
                            .string_len(66)
                            .not_null()
                            .unique_key(),
                    )
                    .col(ColumnDef::new(BadgeIden::Name).string().not_null())
                    .col(
                        ColumnDef::new(BadgeIden::Owner)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(ColumnDef::new(BadgeIden::ImplementationId).uuid().null())
                    .col(ColumnDef::new(BadgeIden::UriId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("badge_implementation_id_fkey")
                            .from(BadgeIden::Table, BadgeIden::ImplementationId)
                            .to(ImplementationIden::Table, ImplementationIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("badge_uri_id_fkey")
                            .from(BadgeIden::Table, BadgeIden::UriId)
                            .to(UriIden::Table, UriIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(YielderIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(YielderIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(YielderIden::Address)
                            .string()
                            .string_len(66)
                            .not_null()
                            .unique_key(),
                    )
                    .col(
                        ColumnDef::new(YielderIden::TotalDeposited)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(YielderIden::TotalAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(ColumnDef::new(YielderIden::SnapshotTime).date_time())
                    .col(ColumnDef::new(YielderIden::ProjectId).uuid().null())
                    .col(ColumnDef::new(YielderIden::ImplementationId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("yielder_project_id_fkey")
                            .from(YielderIden::Table, YielderIden::ProjectId)
                            .to(ProjectIden::Table, ProjectIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("yielder_implementation_id_fkey")
                            .from(YielderIden::Table, YielderIden::ImplementationId)
                            .to(ImplementationIden::Table, ImplementationIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(ProvisionIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(ProvisionIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(ColumnDef::new(ProvisionIden::Amount).binary().not_null())
                    .col(ColumnDef::new(ProvisionIden::Time).date_time().not_null())
                    .col(ColumnDef::new(ProvisionIden::YielderId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("provision_yielder_id_fkey")
                            .from(ProvisionIden::Table, ProvisionIden::YielderId)
                            .to(YielderIden::Table, YielderIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(OffseterIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(OffseterIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(OffseterIden::Address)
                            .string()
                            .string_len(66)
                            .not_null()
                            .unique_key(),
                    )
                    .col(
                        ColumnDef::new(OffseterIden::TotalDeposited)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(OffseterIden::TotalClaimed)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(OffseterIden::TotalClaimable)
                            .binary()
                            .not_null(),
                    )
                    .col(ColumnDef::new(OffseterIden::MinClaimable).binary())
                    .col(ColumnDef::new(OffseterIden::ProjectId).uuid().null())
                    .col(ColumnDef::new(OffseterIden::ImplementationId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("offseter_project_id_fkey")
                            .from(OffseterIden::Table, OffseterIden::ProjectId)
                            .to(ProjectIden::Table, ProjectIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("offseter_implementation_id_fkey")
                            .from(OffseterIden::Table, OffseterIden::ImplementationId)
                            .to(ImplementationIden::Table, ImplementationIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(SnapshotIden::Table)
                    .if_not_exists()
                    .col(
                        ColumnDef::new(SnapshotIden::Id)
                            .uuid()
                            .not_null()
                            .primary_key(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::PreviousTime)
                            .date_time()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::PreviousProjectAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::PreviousYielderAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::PreviousOffseterAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::CurrentProjectAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::CurrentYielderAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::CurrentOffseterAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::ProjectAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::YielderAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(SnapshotIden::OffseterAbsorption)
                            .binary()
                            .not_null(),
                    )
                    .col(ColumnDef::new(SnapshotIden::Time).date_time().not_null())
                    .col(ColumnDef::new(SnapshotIden::YielderId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("snapshot_yielder_id_fkey")
                            .from(SnapshotIden::Table, SnapshotIden::YielderId)
                            .to(YielderIden::Table, YielderIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("snapshot_time_idx")
                            .table(SnapshotIden::Table)
                            .col(SnapshotIden::YielderId)
                            .col(SnapshotIden::Time)
                            .unique(),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(TransferIden::Table)
                    .if_not_exists()
                    .col(ColumnDef::new(TransferIden::Id).uuid().not_null())
                    .col(ColumnDef::new(TransferIden::Hash).string().not_null())
                    .col(
                        ColumnDef::new(TransferIden::From)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(TransferIden::To)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(ColumnDef::new(TransferIden::TokenId).binary().not_null())
                    .col(ColumnDef::new(TransferIden::Time).date_time().not_null())
                    .col(ColumnDef::new(TransferIden::BlockId).binary().not_null())
                    .col(ColumnDef::new(TransferIden::ProjectId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("transfer_project_id_fkey")
                            .from(TransferIden::Table, TransferIden::ProjectId)
                            .to(ProjectIden::Table, ProjectIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("transfer_unique_idx")
                            .table(TransferIden::Table)
                            .col(TransferIden::ProjectId)
                            .col(TransferIden::From)
                            .col(TransferIden::To)
                            .col(TransferIden::TokenId)
                            .unique(),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(AirdropIden::Table)
                    .if_not_exists()
                    .col(ColumnDef::new(AirdropIden::Id).uuid().not_null())
                    .col(ColumnDef::new(AirdropIden::Hash).string().not_null())
                    .col(
                        ColumnDef::new(AirdropIden::Address)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(ColumnDef::new(AirdropIden::Quantity).binary().not_null())
                    .col(ColumnDef::new(AirdropIden::Time).date_time().not_null())
                    .col(ColumnDef::new(AirdropIden::BlockId).binary().not_null())
                    .col(ColumnDef::new(AirdropIden::MinterId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("airdrop_minter_id_fkey")
                            .from(AirdropIden::Table, AirdropIden::MinterId)
                            .to(MinterIden::Table, MinterIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("airdrop_unique_idx")
                            .table(AirdropIden::Table)
                            .col(AirdropIden::MinterId)
                            .col(AirdropIden::Hash)
                            .col(AirdropIden::Address)
                            .col(AirdropIden::Quantity)
                            .unique(),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(BuyIden::Table)
                    .if_not_exists()
                    .col(ColumnDef::new(BuyIden::Id).uuid().not_null())
                    .col(ColumnDef::new(BuyIden::Hash).string().not_null())
                    .col(
                        ColumnDef::new(BuyIden::Address)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(ColumnDef::new(BuyIden::Quantity).binary().not_null())
                    .col(ColumnDef::new(BuyIden::Time).date_time().not_null())
                    .col(ColumnDef::new(BuyIden::BlockId).binary().not_null())
                    .col(ColumnDef::new(BuyIden::MinterId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("buy_minter_id_fkey")
                            .from(BuyIden::Table, BuyIden::MinterId)
                            .to(MinterIden::Table, MinterIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("buy_unique_idx")
                            .table(BuyIden::Table)
                            .col(BuyIden::MinterId)
                            .col(BuyIden::Hash)
                            .col(BuyIden::Address)
                            .col(BuyIden::Quantity)
                            .unique(),
                    )
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(TransferSingleIden::Table)
                    .if_not_exists()
                    .col(ColumnDef::new(TransferSingleIden::Id).uuid().not_null())
                    .col(ColumnDef::new(TransferSingleIden::Hash).string().not_null())
                    .col(
                        ColumnDef::new(TransferSingleIden::From)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(TransferSingleIden::To)
                            .string()
                            .string_len(66)
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(TransferSingleIden::TokenId)
                            .binary()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(TransferSingleIden::Time)
                            .date_time()
                            .not_null(),
                    )
                    .col(
                        ColumnDef::new(TransferSingleIden::BlockId)
                            .binary()
                            .not_null(),
                    )
                    .col(ColumnDef::new(TransferSingleIden::BadgeId).uuid().null())
                    .foreign_key(
                        ForeignKey::create()
                            .name("transfer_single_badge_id_fkey")
                            .from(TransferSingleIden::Table, TransferSingleIden::BadgeId)
                            .to(BadgeIden::Table, BadgeIden::Id)
                            .on_delete(ForeignKeyAction::SetNull)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .index(
                        Index::create()
                            .name("transfer_single_unique_idx")
                            .table(TransferSingleIden::Table)
                            .col(TransferSingleIden::BadgeId)
                            .col(TransferSingleIden::Hash)
                            .col(TransferSingleIden::From)
                            .col(TransferSingleIden::To)
                            .col(TransferSingleIden::TokenId)
                            .unique(),
                    )
                    .to_owned(),
            )
            .await
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        // Drop transfer_single table
        manager
            .drop_table(Table::drop().table(TransferSingleIden::Table).to_owned())
            .await?;

        // Drop buy table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(BuyIden::Table)
                    .name("buy_minter_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(BuyIden::Table).to_owned())
            .await?;

        // Drop airdrop table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(AirdropIden::Table)
                    .name("airdrop_minter_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(AirdropIden::Table).to_owned())
            .await?;

        // Drop transfer table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(TransferIden::Table)
                    .name("transfer_project_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(TransferIden::Table).to_owned())
            .await?;

        // Drop snapshot table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(SnapshotIden::Table)
                    .name("snapshot_yielder_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(SnapshotIden::Table).to_owned())
            .await?;

        // Drop offseter table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(OffseterIden::Table)
                    .name("offseter_project_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(OffseterIden::Table)
                    .name("offseter_implementation_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(OffseterIden::Table).to_owned())
            .await?;

        // Drop provision table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(ProvisionIden::Table)
                    .name("provision_yielder_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(ProvisionIden::Table).to_owned())
            .await?;

        // Drop yielder table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(YielderIden::Table)
                    .name("yielder_project_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(YielderIden::Table)
                    .name("yielder_implementation_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(YielderIden::Table).to_owned())
            .await?;

        // Drop badge table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(BadgeIden::Table)
                    .name("badge_uri_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(BadgeIden::Table)
                    .name("badge_implementation_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(BadgeIden::Table).to_owned())
            .await?;

        // Drop minter table
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(MinterIden::Table)
                    .name("minter_implementation_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(MinterIden::Table)
                    .name("minter_payment_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(MinterIden::Table)
                    .name("minter_project_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(MinterIden::Table).to_owned())
            .await?;

        // Drop payment table and foreign keys
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(PaymentIden::Table)
                    .name("payment_implementation_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(PaymentIden::Table).to_owned())
            .await?;

        // Drop project table and foreign keys
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(ProjectIden::Table)
                    .name("project_implementation_id_fkey")
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(ProjectIden::Table).to_owned())
            .await?;

        manager
            .drop_table(Table::drop().table(UriIden::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(ImplementationIden::Table).to_owned())
            .await?;

        manager
            .drop_type(
                Type::drop()
                    .if_exists()
                    .name(ErcImplementation::Enum)
                    .to_owned(),
            )
            .await
    }
}
